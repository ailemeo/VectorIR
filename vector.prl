#!/usr/local/bin/perl -w

use strict;

use Carp;
use FileHandle;

##########################################################
##  VECTOR1
##
##  Usage:   vector1     (no command line arguments)
##
##  The function &main_loop below gives the menu for the system.
##
##  This is an example program that shows how the core
##  of a vector-based IR engine may be implemented in Perl.
##
##  Some of the functions below are unimplemented, and some
##  are only partially implemented. Suggestions for additions
##  are given below and in the assignment handout.
##
##  You should feel free to modify this program directly,
##  and probably use this as a base for your implemented
##  extensions.  As with all assignments, the range of
##  possible enhancements is open ended and creativity
##  is strongly encouraged.
##########################################################


############################################################
## Program Defaults and Global Variables
############################################################

# This holds the location of the program files
# Default is the working directory
my $DIR  = ".";
#my $HOME = ".";

my $token_docs = "$DIR/cacm";           # tokenized cacm journals
my $corps_freq = "$DIR/cacm";           # frequency of each token in the journ.
my $stoplist   = "$DIR/common_words";   # common uninteresting words
my $titles     = "$DIR/titles.short";   # titles of each article in cacm 
my $token_qrys = "$DIR/query";          # tokenized canned querys
my $query_freq = "$DIR/query";          # frequency of each token in the querys
my $query_relv = "$DIR/query\.rels";    # relevance of a journal entry to a
                                        #  given query

# these files are created in your $HOME directory

my $token_intr = "$DIR/interactive";    # file created for interactive queries
my $inter_freq = "$DIR/interactive";    # frequency of each token in above


# @doc_vector
#
#   An array of hashes, each array index indicating a particular document's
#   weight "vector". 

my @doc_vector = ( );

# @qry_vector
#
#   An array of hashes, each array index indicating a particular query's
#   weight "vector".

my @qry_vector = ( );

# %docs_freq_hash
#
# associative array which holds <token, frequency> pairs where
#
#   token     = a particular word or tag found in the cacm corpus
#   frequency = the total number of times the token appears in
#               the corpus.

my %docs_freq_hash = ( );    

# %corp_freq_hash
#
# associative array which holds <token, frequency> pairs where
#
#   token     = a particular word or tag found in the corpus
#   frequency = the total number of times the token appears per
#               document-- that is a token is counted only once
#               per document if it is present (even if it appears 
#               several times within that document).

my %corp_freq_hash = ( );

# %stoplist_hash
#
# common list of uninteresting words which are likely irrelvant
# to any query.
#
#   Note: this is an associative array to provide fast lookups
#         of these boring words

my %stoplist_hash  = ( );

# @titles_vector
#
# vector of the cacm journal titles. Indexed in order of apperance
# within the corpus.

my @titles_vector  = ( );

# %relevance_hash
#
# a hash of hashes where each <key, value> pair consists of
#
#   key   = a query number
#   value = a hash consisting of document number keys with associated
#           numeric values indicating the degree of relevance the 
#           document has to the particular query.

my %relevance_hash = ( );

# @doc_simula
#
# array used for storing query to document or document to document
# similarity calculations (determined by cosine_similarity, etc. )

my @doc_simula = ( );

# @res_vector
#
# array used for storing the document numbers of the most relevant
# documents in a query to document or document to document calculation.

my @res_vector = ( );

# @precision
#
# array that stores the precison valus at each interval of the 
# relevant documents list
my @precision = ( );

# @rel_docs_rank
#
# array that stores the rank for each relevant document in order
my @rel_docs_rank = ( );

# $term_weighting
#
# 1. TF-IDF - Default
# 2. Raw TF
# 3. Boolean
# Term weighting permutations  
my $term_weighting;

# $sim
#
# 1. Cosine - Default
# 0. Overlap
# Similarity measures  
my $sim;

# $stem
#
# 1. Use stemmed - Default
# 0. Use raw unstemmed
# Stemming 
my $stem;

# $use_stoplist
#
# 1. Exclude stopwords - Default
# 0. Use all tokens
# Stopwords  
my $use_stoplist;

# $region_weighting
#
# 1. Titles:3, Keywords:4, Author:3, Abstract:4 - Default
# 2. Titles:1, Keywords:1, Author:1, Abstract:1
# 3. Titles:1, Keywords:1, Author:1, Abstract:4
# Region weighting permutations  
my $region_weighting;

# $total_docs
#
# Total number of docuemnts in the corpus
my $total_docs;

# $total_qrys
#
# Total number of queries in the corpus
my $total_qrys;

# %qry_sum_sq
#
# Hash of the sum of squares of term weights for the queries
my %qry_sum_sq;

# %doc_sum_sq
#
# Hash of the sum of squares of term weights for the documents
my %doc_sum_sq;

# %qry_sum_wt
#
# Hash of the sum of term weights for the queries
my %qry_sum_wt;

# %doc_sum_wt
#
# Hash of the sum of term weights for the documents
my %doc_sum_wt;
 
# start program

&main_loop;

##########################################################
##  INIT_FILES
##
##  This function specifies the names and locations of
##  input files used by the program. 
##
##  Parameter:  $type   ("stemmed" or "unstemmed")
##
##  If $type == "stemmed", the filenames are initialized
##  to the versions stemmed with the Porter stemmer, while
##  in the default ("unstemmed") case initializes to files
##  containing raw, unstemmed tokens.
##########################################################

sub init_files {
    
    # switching between the stemmed and tokenized files
    # when a different permutation is selected.
    if (($token_docs =~ m/\.stemmed/) or 
	($token_docs =~ m/\.tokenized/)) {
		
	$token_docs =~ s/\.[^\.]+$//;
	$corps_freq =~ s/\.[^\.]+\.[^\.]+$//;
	$token_qrys =~ s/\.[^\.]+$//;
	$query_freq =~ s/\.[^\.]+\.[^\.]+$//;
	$token_intr =~ s/\.[^\.]+$//;
	$inter_freq =~ s/\.[^\.]+\.[^\.]+$//;
    }
    $stoplist  =~ s/\.[^\.]+$// if $stoplist =~ m/\.stemmed/;
    if ($stem) {
	
	$token_docs .= "\.stemmed";
	$corps_freq .= "\.stemmed\.hist";
	$stoplist   .= "\.stemmed";
	$token_qrys .= "\.stemmed";
	$query_freq .= "\.stemmed\.hist";
	$token_intr .= "\.stemmed";
	$inter_freq .= "\.stemmed\.hist";
    }
    else {
	
	$token_docs .= "\.tokenized";
	$corps_freq .= "\.tokenized\.hist";
	$token_qrys .= "\.tokenized";
	$query_freq .= "\.tokenized\.hist";
	$token_intr .= "\.tokenized";
	$inter_freq .= "\.tokenized\.hist";
    }
}

##########################################################
##  INIT_CORP_FREQ 
##
##  This function reads in corpus and document frequencies from
##  the provided histogram file for both the document set
##  and the query set. This information will be used in
##  term weighting.
##
##  It also initializes the arrays representing the stoplist,
##  title list and relevance of document given query.
##########################################################

sub init_corp_freq {
	
    %docs_freq_hash = ( );
    %corp_freq_hash = ( );
    %stoplist_hash = ( );
    @titles_vector = ( );
    %relevance_hash = ( );

    my $corps_freq_fh = new FileHandle $corps_freq, "r" 
	or croak "Failed $corps_freq";

    my $query_freq_fh = new FileHandle $query_freq, "r"
	or croak "Failed $query_freq";

    my $stoplist_fh   = new FileHandle $stoplist  , "r"
	or croak "Failed $stoplist";

    my $titles_fh     = new FileHandle $titles    , "r"
	or croak "Failed $titles";

    my $query_relv_fh = new FileHandle $query_relv, "r"
	or croak "Failed $query_relv";

    my $line = undef;

    while (defined( $line = <$corps_freq_fh> )) {

	# so on my computer split will return a first element of undef 
	# if the leading characters are white space, so I eat the white
	# space to insure that the split works right.

	my ($str) = ($line =~ /^\s*(\S.*)/);

	my ($doc_freq,
	    $cor_freq, 
	    $term    ) = split /\s+/, $str;

	$docs_freq_hash{ $term } = $doc_freq;
	$corp_freq_hash{ $term } = $cor_freq;
    }
    

    while (defined( $line = <$query_freq_fh> )) {

	my ($str) = ($line =~ /^\s*(\S.*)/);

	my ($doc_freq,
	    $cor_freq,
	    $term    ) = split /\s+/, $str;

	$docs_freq_hash{ $term } += $doc_freq;
	$corp_freq_hash{ $term } += $cor_freq;
    }


    while (defined( $line = <$stoplist_fh> )) {

	chomp $line;
	$stoplist_hash{ $line } = 1;
    }


    push @titles_vector, "";       # push one empty value onto @titles_vector
                                   # so that indices correspond with title
                                   # numbers.

    while (defined( $line = <$titles_fh> )) {

	chomp $line;
	push @titles_vector, $line;
    }


    while (defined( $line = <$query_relv_fh> )) {

	my ($str) = ($line =~ /^\s*(\S.*)/);

	my ($qry_num,
	    $rel_doc)  = split /\s+/, $str;

	$relevance_hash{ int($qry_num) }{ "$rel_doc" } = 1;
    }
}


##########################################################
##  INIT_DOC_VECTORS
##
##  This function reads in tokens from the document file.
##  When a .I token is encountered, indicating a document
##  break, a new vector is begun. When individual terms
##  are encountered, they are added to a running sum of
##  term frequencies. To save time and space, it is possible
##  to normalize these term frequencies by inverse document
##  frequency (or whatever other weighting strategy is
##  being used) while the terms are being summed or in
##  a posthoc pass.  The 2D vector array 
##
##    $doc_vector[ $doc_num ]{ $term }
##
##  stores these normalized term weights.
##
##  It is possible to weight different regions of the document
##  differently depending on likely importance to the classification.
##  The relative base weighting factors can be set when 
##  different segment boundaries are encountered.
##
##  This function is currently set up for simple TF weighting.
##########################################################

sub init_doc_vectors {
    
    @doc_vector = ( );
    
    # weight given a title token
    my $TITLE_BASE_WEIGHT = $region_weighting == 1 ? 3 : 1;     
    # weight given a key word token
    my $KEYWD_BASE_WEIGHT = $region_weighting == 1 ? 4 : 1;  
    # weight given an abstract word token   
    my $ABSTR_BASE_WEIGHT = $region_weighting == 3 ? 4 : 1;    
    # weight given an an author token 
    my $AUTHR_BASE_WEIGHT = $region_weighting == 1 ? 3 : 1;     

    my $token_docs_fh = new FileHandle $token_docs, "r"
	or croak "Failed $token_docs";

    my $word    = undef;

    my $doc_num =  0;    # current document number and total docs at end
    my $tweight =  0;    # current weight assigned to document token

    push @doc_vector, { };     # push one empty value onto @doc_vector so that
                               # indices correspond with document numbers

    while (defined( $word = <$token_docs_fh> )) {
	
	chomp $word;

	last if $word =~ /^\.I 0/; # indicates end of file so kick out
	
	if ($word =~ /^\.I/) {     # indicates start of a new document

	    push @doc_vector, { };
	    $doc_num++;

	    next;
	}
	
	$tweight = $TITLE_BASE_WEIGHT and next if $word =~ /^\.T/;
	$tweight = $KEYWD_BASE_WEIGHT and next if $word =~ /^\.K/;
	$tweight = $ABSTR_BASE_WEIGHT and next if $word =~ /^\.W/;
	$tweight = $AUTHR_BASE_WEIGHT and next if $word =~ /^\.A/;

	# check if stoplist is to be used
	if ($word =~ /[a-zA-Z]/ and !($use_stoplist and exists $stoplist_hash{ $word })) {

#	    print $word, "\n";
#	    print $docs_freq_hash{ $word }, "\n";

	    if (defined( $docs_freq_hash{ $word } )) {

#		print $word, "\n";
		if($term_weighting == 3) {
		    # boolean term weighting
		    # if not already in document
		    # or previously seen at a lower weighted region
		    # then set
		    $doc_vector[$doc_num]{ $word } = $tweight 
			if (!$doc_vector[$doc_num]{ $word } or 
			    $doc_vector[$doc_num]{ $word } < $tweight);
		}
		else {
		    # TF weighting
		    $doc_vector[$doc_num]{ $word } += $tweight;
		    #if !($term_weighting == 3 and $doc_vector[$doc_num]{ $word });
		}
	    }
	    else {
		print "ERROR: Document frequency of zero: ", $word, "\n";
	    }
	}
    }
    
    # TF-IDF: Multiply by the IDF score
    if ($term_weighting == 1) {
	foreach my $hash (@doc_vector) {
	    foreach my $key (keys %{ $hash }) {
		 $$hash{ $key } *= log( $doc_num / $docs_freq_hash{ $key });
	    }
	}
    }
    
    %doc_sum_wt = ( );
    %doc_sum_sq = ( );
    return $doc_num;
}

##########################################################
##  INIT_QRY_VECTORS
##
##  This function should be nearly identical to the step
##  for initializing document vectors.
##
##  This function is currently set up for simple TF weighting.
##########################################################

sub init_qry_vectors {

    @qry_vector = ( );
    
    # weight given an abstract word token   
    my $QUERY_BASE_WEIGHT = 2;#$region_weighting == 3 ? 4 : 1;    
    # weight given an an author token 
    my $QUERY_AUTH_WEIGHT = 2;#$region_weighting == 1 ? 3 : 1;  

    my $token_qrys_fh = new FileHandle $token_qrys, "r"
	or croak "Failed $token_qrys";

    my $word = undef;

    my $tweight =  0;
    my $qry_num =  0;

    push @qry_vector, { };    # push one empty value onto @qry_vectors so that
                              # indices correspond with query numbers

    while (defined( $word = <$token_qrys_fh> )) {

	chomp $word;

	if ($word =~ /^\.I/) {
	    
	    push @qry_vector, { };
	    $qry_num++;

	    next;
	}

	$tweight = $QUERY_BASE_WEIGHT and next if $word =~ /^\.W/;
	$tweight = $QUERY_AUTH_WEIGHT and next if $word =~ /^\.A/;

	# check if stoplist is to be used
	if ($word =~ /[a-zA-Z]/ and !($use_stoplist and exists $stoplist_hash{ $word })) {

	    if (! exists $docs_freq_hash{ $word }) {
		print "ERROR: Document frequency of zero: ", $word, "\n";
	    }
	    else {
		    
		if($term_weighting == 3) {
		    # boolean term weighting
		    # if not already in document
		    # or previously seen at a lower weighted region
		    # then set
		    $qry_vector[$qry_num]{ $word } = $tweight 
			if (!$qry_vector[$qry_num]{ $word } or 
			    $qry_vector[$qry_num]{ $word } < $tweight);
		}
		else {
		    #TF weighting
		    $qry_vector[$qry_num]{ $word } += $tweight;
		}
	    }
	}
    }

    # TF-IDF: Multiply by the IDF score
    if ($term_weighting == 1) {
	foreach my $hash (@qry_vector) {
		  foreach my $key (keys %{ $hash }) {
	        $$hash{ $key } *= log( $total_docs / $docs_freq_hash{ $key });
	    }
	}
    }
    
    %qry_sum_wt = ( );
    %qry_sum_sq = ( );
    return $qry_num;
}


##########################################################
## MAIN_LOOP
##
## Parameters: currently no explicit parameters.
##             performance dictated by user imput.
## 
## Initializes document and query vectors using the
## input files specified in &init_files. Then offers
## a menu and switch to appropriate functions in an
## endless loop.
## 
## Possible extensions at this level:  prompt the user
## to specify additional system parameters, such as the
## similarity function to be used.
##
## Currently, the key parameters to the system (stemmed/unstemmed,
## stoplist/no-stoplist, term weighting functions, vector
## similarity functions) are hardwired in.
##
## Initializing the document vectors is clearly the
## most time consuming section of the program, as 213334 
## to 258429 tokens must be processed, weighted and added
## to dynamically growing vectors.
## 
##########################################################

sub main_loop {
    
    while (1) {
	
	my $d = $total_docs ? $total_docs : 3204;
	my $q = $total_qrys ? $total_qrys : 33;
	print <<"EndOfMenu";

	============================================================
	==     Welcome to the 600.466 Vector-based IR Engine
	==                                                  
        == Total Documents: $d                  
	== Total Queries: $q                     
	============================================================
	==                                                  
        == There are different parameters for the computations and 
        == different results for the permutation of the 
        == parameters:
        == Permutation 1: Default
        == 	TF-IDF, Cosine similarity, Stemmed tokens, Stop words,
	==	term weights of (3,4,3,1) for (titles, keywords, 
	== 	author, abstract) regions in the documents.
	== Permutation 2: TF weighting
	== Permutation 3: Boolean weighting
	== Permutation 4: Overlap similarity
	== Permutation 5: Unstemmed tokens
	== Permutation 6: No stop words
	== Permutation 7: Equal region weights
	== Permutation 8: Abstract region weight = 4, All others = 1
	
	OPTIONS:
	==== For these options, you pick one of the permutations ======
	  1 = Find documents most similar to a given query or document
	  2 = Compute cosine similarity between two queries/documents
	  
	==== This computes for all the permutations
	  3 = Compute precision/recall for the full query set
	  
	  4 = Quit

	============================================================

EndOfMenu
    ;

	print "Enter Option: ";

	my    $option = <STDIN>;
	chomp $option;

	exit 0 if $option == 4;

	if($option == 3) {
	    &full_precision_recall_test;
	    print "\nENTER to continue: ";
	    <STDIN>;
	    next; 		
	}	
     
	print "Enter permutation: ";

	my    $perm = <STDIN>;
	chomp $perm;	
	
	print "INITIALIZING VECTORS ... \n";
	&set_config($perm);
	
	if($option == 2) {
	    &do_full_cosine_similarity;
	    print "\nENTER to continue: ";
	    <STDIN>;
	    next; 		
	}

	# default and choice 1 is

	&get_and_show_retrieved_set;
	print "\nENTER to continue: ";
	<STDIN>;
    } 
}

########################################################
# set_config
# 
# This function initialises the documents and query
# vectors, and reads in all the files for the 
# computations. It accepts an optional argument which
# specifies the configuration for the different 
# dimensions. The values for the config argument
# are defined below:
#
# 1. Default.
# 2. Term weighting: Raw TF weighting
# 3. Term weighting: Boolean weighting
# 4. Similarity: Overlap
# 5. Stemming: Use unstemmed
# 6. Stopwords: Use all tokens
# 7. Region: Equal weighting
# 8. Region: Titles/keywords/author:1, abstract:4
########################################################
sub set_config {   

    my $config = shift;
    $config = 1 if !$config or $config < 1 or $config > 8;
    
    # DEFAULT VALUES
    $term_weighting = 1;
    $sim = 1;
    $stem = 1;
    $use_stoplist = 1;
    $region_weighting = 1;
    
    # set the values based on the permutation
    $term_weighting = 2 if $config == 2;
    $term_weighting = 3 if $config == 3;
    $sim = 0 if $config == 4;
    $stem = 0 if $config == 5;
    $use_stoplist = 0 if $config == 6;
    $region_weighting = 2 if $config == 7;
    $region_weighting = 3 if $config == 8;
    
    # Setup all the data structures
    &init_files;
    &init_corp_freq;
    
    $total_docs = &init_doc_vectors;
    $total_qrys = &init_qry_vectors;
}


##########################################################
## GET_AND_SHOW_RETRIEVED_SET
##   
##  This function requests key retrieval parameters,
##  including:
##  
##  A) Is a query vector or document vector being used
##     as the retrieval seed? Both are vector representations
##     but they are stored in different data structures,
##     and one may optionally want to treat them slightly
##     differently.
##
##  B) Enter the number of the query or document vector to
##     be used as the retrieval seed.
##
##     Alternately, one may wish to request a new query
##     from standard input here (and call the appropriate
##     tokenization, stemming and term-weighting routines).
##
##  C) Request the maximum number of retrieved documents
##     to display.
##
##  Perl note: one reads a line from a file <FILE> or <STDIN>
##             by the assignment $string=<STDIN>; Beware of
##             string equality testing, as these strings 
##             will have a newline (\n) attached.
##########################################################

sub get_and_show_retrieved_set {

    #	(2) an interactive query
    print << "EndOfMenu";

    Find documents similar to:
        (1) a query from 'query.raw'
	(2) another document
EndOfMenu
    ;

    print "Choice: ";

    my    $comp_type = <STDIN>;
    chomp $comp_type;

    if   ($comp_type !~ /^[1-2]$/) { $comp_type = 1; }

    print "\n";
	

    # if not an interactive query than we need to retrieve which
    # query/document we want to use from the corpus
    
    my $vect_num = 1;

    #if ($comp_type != 2) {
	print "Target Document/Query number: ";

	      $vect_num  = <STDIN>;
	chomp $vect_num;

	if   ($vect_num !~ /^[1-9]/) { $vect_num  = 1; }

	print "\n";
    #}


    print "Show how many matching documents (20): ";
    
    my    $max_show  = <STDIN>;
    chomp $max_show;

    if   ($max_show !~ /[0-9]/) { $max_show  = 20; }

    if    ($comp_type == 2) {

	print "Document to Document comparison\n";
	
	&get_retrieved_set( $doc_vector[$vect_num],  $vect_num);
	&shw_retrieved_set( $max_show, 
			    $vect_num, 
			    $doc_vector[$vect_num],
			    "Document" );
    }
    #elsif ($comp_type == 2) {
    #
    #	print "Interactive Query to Document comparison\n";
    #
    #	my $int_vector = &set_interact_vec;  # vector created by interactive
                                             #  query

    #	&get_retrieved_set( $int_vector, $vect_num);
    #	&shw_retrieved_set( $max_show,
#			    0,
#			    $int_vector,
#			    "Interactive Query" );
 #   }
    else {

	print "Query to Document comparison\n";

	&get_retrieved_set( $qry_vector[$vect_num], $vect_num);
	&shw_retrieved_set( $max_show,
			    $vect_num,
			    $qry_vector[$vect_num],
			    "Query" );
	
	my @prec_recall_values = &comp_recall( $relevance_hash{ $vect_num });
	&show_relvnt( $relevance_hash{ $vect_num },
		      $vect_num,
		      $qry_vector[$vect_num] );
	
	# Print the precision and recall parameters
	&print_prec_recall(@prec_recall_values, $vect_num);
    }
}


sub set_interact_vec {

    system "perl $DIR/interactive.prl" and die "Failed $DIR/interactive.prl: $!\n";

    my $QUERY_BASE_WEIGHT = 2;
    my $QUERY_AUTH_WEIGHT = 2;

    my $token_qrys_fh = new FileHandle $token_intr, "r"
	or croak "Failed $token_intr";

    my $int_vector = { };
    my $word       = undef;

    my $tweight =  0;
    my $qry_num =  0;

    while (defined( $word = <$token_qrys_fh> )) {

	chomp $word;
	print $word, "\n";

	next if $word =~ /^\.I/;   # start of query tokens

	$tweight = $QUERY_BASE_WEIGHT and next if $word =~ /^\.W/;
	$tweight = $QUERY_AUTH_WEIGHT and next if $word =~ /^\.A/;

	if ($word =~ /[a-zA-Z]/ && ! exists $stoplist_hash{ $word }) {

	    if (! exists $docs_freq_hash{ $word }) {
		print "ERROR: Document frequency of zero: ", $word, "\n";
	    }
	    else {
		$$int_vector{ $word } += $tweight;
	    }
	}
    }

    return $int_vector
}

    
###########################################################
## GET_RETRIEVED_SET
##
##  Parameters:
## 
##  $qry_vector{} - the query vector to be compared with the
##                  document set. May also be another document 
##                  vector.
##
##  This function computes the document similarity between the
##  given vector $qry_vector{} and all vectors in the document
##  collection storing these values in the array @doc_simula
##
##  An array of the document numbers is then sorted by this
##  similarity function, forming the rank order of documents
##  for use in the retrieval set.  
##
##  The -1 in the simcomp similarity comparision function
##  makes the sorted list in descending order.
##########################################################
 
sub get_retrieved_set {

    my $qry_vector = shift;
    my $qry = shift;
    
    my $tot_number = (scalar @doc_vector) - 1;
    my $index      = 0;

    @doc_simula = ( );   # insure that storage vectors are empty before we
    @res_vector = ( );   # calculate vector similarities

    push @doc_simula, 0.0;    # push one empty value so that indices 
                              # correspond with document values

    for $index ( 1 .. $tot_number) {
	
	# Cosine or Overlap similarity 
	my $similarity = $sim ? 
	    &cosine_sim_a( $qry_vector, $doc_vector[$index], $qry, $index)
	    : &overlap_sim( $qry_vector, $doc_vector[$index], $qry, $index);
	push @doc_simula, $similarity;
    }

    @res_vector = 
      sort { -1 * ($doc_simula[$a] <=> $doc_simula[$b]); } 1 .. $tot_number;
}
    
############################################################
## SHW_RETRIEVED_SET
##
## Assumes the following global data structures have been
## initialized, based on the results of &get_retrieved_set.
##
## 1) @res_vector - contains the document numbers sorted in 
##                  rank order
## 2) @doc_simula - The similarity measure for each document, 
##                  computed by &get_retrieved_set.
##
## Also assumes that the following have been initialized in
## advance:
##
##       $titles[ $doc_num ]    - the document title for a 
##                                document number, $doc_num
##       $relevance_hash{ $qry_num }{ $doc_num }
##                              - is $doc_num relevant given
##                                query number, $qry_num
##
## Parameters:
##   $max_show   - the maximum number of matched documents 
##                 to display.
##   $qry_num    - the vector number of the query
##   $qry_vect   - the query vector (passed by reference)
##   $comparison - "Query" or "Document" (type of vector 
##                 being compared to)
##
## In the case of "Query"-based retrieval, the relevance 
## judgements for the returned set are displayed. This is 
## ignored when doing document-to-document comparisons, as 
## there are nor relevance judgements.
##
############################################################

sub shw_retrieved_set {

    my $max_show   = shift;
    my $qry_num    = shift;
    my $qry_vect   = shift;
    my $comparison = shift;

    print << "EndOfList";

    ************************************************************
	Documents Most Similar To $comparison number $qry_num
    ************************************************************
    Similarity  Doc#  Author      Title
    ==========  ==== ========     =============================

EndOfList
    ;

    my $rel_num = ($qry_num =~ /^\d$/) ? "$qry_num" : $qry_num;
    my $index   = 0;

    for $index ( 0 .. $max_show-1 ) {
	my $ind = $res_vector[$index];

	if (($comparison =~ /Query/) and 
	    ($relevance_hash{ $rel_num }{ $ind })) {
	    print "\* ";
	}
	else {
	    print "  ";
	}

	my ($similarity) = ($doc_simula[$ind]    =~ /^([0-9]+\.\d{0,8})/);
	$similarity =  ($doc_simula[$ind]    =~ /^([0-9])$/).".00000000" if !$similarity;
	my  $title       = substr $titles_vector[$ind], 0, 47;

	print "  ", $similarity, "  ", $title, "\n";
    }

    print "\n";
    print "Show the terms that overlap between the query and ";
    print "retrieved docs (y/n): ";

    my  $show_terms = <STDIN>;
    if ($show_terms !~ /[nN]/) {

	my $index = 0;

	for $index ( 0 .. $max_show ) {
	    my $ind = $res_vector[$index];

	    show_overlap( $qry_vect,
			  $doc_vector[$ind],
			  $qry_num,
			  $ind );

	    if ($index % 10 == 9) {

		print "\n";
		print "Continue (y/n)? ";

		my  $cont = <STDIN>;
		if ($cont =~ /[nN]/) {
		    last;
		}
	    }
	}
    }
}


##########################################################
## COMPUTE_PREC_RECALL
##
## Like &shw_retrieved_set, this function makes use of the following
## data structures which may either be passed as parameters or
## used as global variables. These values are set by the function
## &get_retrieved_set.
##
## 1) doc_simila[ $rank ] - contains the document numbers sorted 
##                          in rank order based on the results of 
##                          the similarity function
##
## 2) res_vector[ $docn ] - The similarity measure for each document, 
##                          relative to the query vector ( computed by 
##                          &get_retrieved_set).
##
## Also assumes that the following have been initialzied in advance:
##       $titles[ $docn ]       - the document title for a document 
##                                number $docn
##       $relevance_hash{ $qvn }{ $docn } 
##                              - is $docn relevant given query number 
##                                $qvn
##
##  The first step of this function should be to take the rank ordering
##  of the documents given a similarity measure to a query 
##  (i.e. the list docs_sorted_by_similarity[$rank]) and make a list 
##  of the ranks of just the relevant documents. In an ideal world,
##  if there are k=8 relevant documents for a query, for example, the list 
##  of rank orders should be (1 2 3 4 5 6 7 8) - i.e. the relevant documents
##  are the top 8 entries of all documents sorted by similarity.
##  However, in real life the relevant documents may be ordered
##  much lower in the similarity list, with rank orders of
##  the 8 relevant of, for example, (3 27 51 133 159 220 290 1821).
##  
##  Given this list, compute the k (e.g. 8) recall/precison pairs for
##  the list (as discussed in class). Then to determine precision
##  at fixed levels of recall, either identify the closest recall
##  level represented in the list and use that precision, or
##  do linear interpolation between the closest values.
##
##  This function should also either return the various measures
##  of precision/recall specified in the assignment, or store
##  these values in a cumulative sum for later averaging.
##########################################################

sub comp_recall {
    # actual relevant documents
    my $rel_docs = shift;
    
    # last document index
    my $tot_number = (scalar @doc_vector) - 1;
    
    # the rank of each relevant document
    @rel_docs_rank = ( );
    
    # this holds the precision value calculated 
    # at the point of each relevant document in
    # the retrieved list
    @precision = ( );
    
    my $num = 1;
    my $rank_sum = 0, my $rank_log_sum = 0;
    my $index_sum = 0, my $index_log_sum = 0;   
    
    # go through the retrieved list sorted by similarity
    # and extract the rank of the relevant documents
    # and other precision related parameters
    for my $i (0 .. $#res_vector) {
	# skip if not relevant.
	next if (! $$rel_docs{ $res_vector[$i] });
	my $rank = $i+1;
	push @rel_docs_rank, $rank;
	push @precision, ($num / $rank);
	# Sum up rank and log rank
	$rank_sum += $rank;
	$rank_log_sum += log($rank);
	# Sum up index and log index
	$index_sum += $num;
	$index_log_sum += log($num);
	++$num;
    } 
    $num--;
    # array of precision and recall values needed
    my @prec_recall_values = ( );
    
    # P 0.25
    my $prec_25 = &comp_prec_estimate(0.25);
    push @prec_recall_values, $prec_25;
    # P 0.50
    my $prec_50 = &comp_prec_estimate(0.5);
    push @prec_recall_values, $prec_50;
    # P 0.75
    my $prec_75 = &comp_prec_estimate(0.75);
    push @prec_recall_values, $prec_75;
    # P 1
    my $prec_100 = $precision[$#precision];
    push @prec_recall_values, $prec_100;
    # P mean1
    push @prec_recall_values, ($prec_25 + $prec_50 + $prec_75) / 3;
    # P mean 2
    my $p_sum2 = $prec_100;
    for my $i (1 .. 9) {
	$p_sum2 += &comp_prec_estimate($i / 10);
    }
    push @prec_recall_values, ($p_sum2 / 10);
    # P norm
    my $precision_norm = 1 - (($rank_log_sum - $index_log_sum) / 
			(&log_factorial($tot_number) - 
			&log_factorial($tot_number - $num) - 
			&log_factorial($num)));
    push @prec_recall_values, $precision_norm;
    # R norm
    my $recall_norm = 1 - (($rank_sum - $index_sum) / 
		    ($num * ($tot_number - $num)));
    push @prec_recall_values, $recall_norm;
    
    return @prec_recall_values;
   
}

##########################################################
## PRINT_PREC_RECALL
#
#  Prints the precision/recall values
##########################################################
sub print_prec_recall {
	
    my @prec_recall_values =  @_;
    my $qry_num = pop @prec_recall_values;  
    
    my $q = $qry_num ? "Query ".$qry_num : "Queries";
    print << "Precision";

    ***************************************************************
	       Precision/Recall Parameters for $q
    ***************************************************************
     P.25    P.50    P.75    P1.0    Pmn1    Pmn2    Pnrm    Rnrm
    ======  ======  ======  ======  ======  ======  ======  ======

Precision
    ;
	printf("    %.4f  %.4f  %.4f  %.4f  %.4f  %.4f  %.4f  %.4f\n", 
	$prec_recall_values[0], $prec_recall_values[1],
	$prec_recall_values[2], $prec_recall_values[3], 
	$prec_recall_values[4], $prec_recall_values[5],
	$prec_recall_values[6], $prec_recall_values[7]); 
}

##########################################################
## FACTORIAL
## 
##
## This function approximates log n! with n*log(n)
##########################################################

sub log_factorial {
    my $n = shift;
    return $n * log($n);
}

##########################################################
## comp_prec_estimate
## 
##
## This function the expected precision at a certain
## recall value with interpolation and extrapolation
# where necessary.
##########################################################

sub comp_prec_estimate {
    my $recall = shift;
    
    my $prec = 0;
    
    # number of relevant documents
    my $num_rel = $#precision + 1;
    
    # lowest recall value
    my $lowest = 1 / $num_rel;
    
    # 0 <= recall <= 1
    $recall = 1 if $recall > 1;
    $recall = 0 if $recall < 0;
    
    
    if($recall < $lowest) {
	# extrapolate
	if($num_rel == 1) {
	    # interpolate between 1 and precision[0]
	    # assume that Precision at 0 recall is 1
	    $prec = 1 + (($precision[0] - 1)* $recall);
	}
	else {
	    my $rank = $recall * $num_rel;
	    $prec = $precision[0] + (($precision[1] 
		    - $precision[0]) * ($rank - 1));
	}
    }
    elsif(($recall * $num_rel) =~ /^\d+$/) {
	# read directly from precision table
	$prec = $precision[($recall * $num_rel) - 1];
    }
    else {
	# interpolate
	my $rank = $recall * $num_rel;
	my $lower = int($rank);
	my $upper = int($rank + 1);
	$prec = $precision[$lower-1] + (($precision[$upper - 1] 
		- $precision[$lower - 1]) * ($rank - $lower));
    }
    
    return $prec > 1 ? 1 : $prec;
}

##########################################################
## SHOW_RELVNT
## 
## UNIMPLEMENTED
##
## This function should take the rank orders and similarity
## arrays described in &show_retrieved_set and &comp_recall
## and print out only the relevant documents, in an order
## and manner of presentation very similar to &show_retrieved_set.
##########################################################

sub show_relvnt {
    my $rel_docs = shift;
    my $qry_num = shift; 
    
    print << "PrecisionTable";

    **********************************************************
	 PRECISON and RECALL Table for Query/Doc $qry_num
    **********************************************************
    Rel#   Rank   RECALL     PRECISION    Doc#    Similarity
    ====   ====   =======    ==========   ====    ==========

PrecisionTable
    ;
    my @rel_indices = (keys %{ $rel_docs });
    for my $i (0 .. $#precision) {
	my $doc = $res_vector[$rel_docs_rank[$i]-1];
	my ($similarity) = ($doc_simula[$doc]    =~ /^([0-9]+\.\d{0,8})/);
	$similarity =  ($doc_simula[$doc]    =~ /^([0-9])$/).".00000000" if !$similarity;
	printf("      %2d   %.4d    %.4f    %.8f   %4s    %.8f\n", ($i+1), $rel_docs_rank[$i],
	 (($i+1)/($#precision+1)), $precision[$i], $doc, $similarity);    
    }
}


########################################################
## SHOW_OVERLAP
## 
## Parameters:
##  - Two vectors ($qry_vect and $doc_vect), passed by
##    reference.
##  - The number of the vectors for display purposes
##
## PARTIALLY IMPLEMENTED:
## 
## This function should show the terms that two vectors
## have in common, the relative weights of these terms
## in the two vectors, and any additional useful information
## such as the document frequency of the terms, etc.
##
## Useful for understanding the reason why documents
## are judged as relevant. 
##
## Present in a sorted order most informative to the user.
##
########################################################

sub show_overlap {

    my $qry_vect = shift;
    my $doc_vect = shift;
    my $qry_num  = shift;
    my $doc_num  = shift;

    print "============================================================\n";
    printf( "%-15s  %8d   %8d\t%s\n", 
	   "Vector Overlap",
	   $qry_num        ,
	   $doc_num        ,
	   "Docfreq"       );
    print "============================================================\n";

    my $term_one   = undef;
    my $weight_one = undef;

    while (($term_one, $weight_one) = each %{ $qry_vect }) {
	if (exists $$doc_vect{ $term_one }) {

	    printf( "%-15s  %8d   %8d\t%d\n"    ,
		   $term_one                    ,
		   $weight_one                  ,
		   $$doc_vect{ $term_one }      ,
		   $docs_freq_hash{ $term_one } );
	}
    }
}


########################################################
## DO_FULL_COSINE_SIMILARITY
## 
##  Prompts for a document number and query number,
##  and then calls a function to show similarity.
##
##  Could/should be expanded to handle a variety of
##  similarity measures.
########################################################

sub do_full_cosine_similarity {

    print "\n";
    print "1st Document/Query number: ";

    my    $num_one = <STDIN>;
    chomp $num_one;

    print "\n";
    print "2nd Document/Query number: ";
    
    my    $num_two = <STDIN>;
    chomp $num_two;

    $num_one = 1 if $num_one !~ /[0-9]/;
    $num_two = 1 if $num_two !~ /[0-9]/;

    full_cosine_similarity( $qry_vector[$num_one],
			    $doc_vector[$num_two],
			    $num_one,
			    $num_two );
}


########################################################
## FULL_COSINE_SIMILARITY
## 
## UNIMPLEMENTED
## 
## This function should compute cosine similarity between
## two vectors and display the information that went into
## this calculation, useful for debugging purposes.
## Similar in structure to &show_overlap.
########################################################
 
sub full_cosine_similarity {

    my $qry_vect = shift;
    my $doc_vect = shift;
    my $qry_indx = shift;
    my $doc_indx = shift;

    print "============================================================\n";
    printf( "%-15s  %8d   %8d\t%s\n", 
	   "Term",
	   $qry_indx        ,
	   $doc_indx        ,
	   "Product"       );
    print "============================================================\n";

    my $term_one   = undef;
    my $weight_one = undef;
    my $total_product = 0;

    while (($term_one, $weight_one) = each %{ $qry_vect }) {
	if (exists $$doc_vect{ $term_one }) {
	    my $product = $weight_one * $$doc_vect{ $term_one };
	    $total_product += $product;
	    printf( "%-15s  %8d   %8d\t%d\n"    ,
		   $term_one                    ,
		   $weight_one                 ,
		   $$doc_vect{ $term_one }      ,
		   $product );
	}
    }
    
    print "============================================================\n";
    printf( "%-15s  %-8s   %-8s\t%d\n", 
	   "TOTAL",
	   ""     ,
	   ""     ,
	   $total_product       );
    print "============================================================\n";
}


##########################################################
##  FULL_PRECISION_RECALL_TEST
##
##  This function should test the various precision/recall 
##  measures discussed in the assignment and store cumulative
##  statistics over all queries.
##
##  As each query takes a few seconds to process, print
##  some sort of feedback for each query so the user
##  has something to watch.
##
##  It is helpful to also log this information to a file.
##########################################################

sub full_precision_recall_test {
	
    my @perms = ("TF IDF(Def)", "Raw TF", "*Boolean", "Cosine sim",
		"Overlap sim", "Unstemmed", 
		"*Eq. Wts", "*(1,..4)Wts");
    print << "Precision";

    ***********************************************************************
	   Precision/Recall Parameters averaged over all 33 Queries
    ***********************************************************************
      Permut.\t   P.25   P.50   P.75   P1.0   Pmn1   Pmn2   Pnrm   Rnrm
    ===========   =====  =====  =====  =====  =====  =====  =====  =====
Precision
	;
	
    # for each permutation
    for my $perm (1..8) {   
	
	# change the configuration..set up the data structures
	set_config($perm);
       my @precision_recall_sum = ( );
       for my $ind ( 1 .. $total_qrys ) {

	    # find the similar documents
	    &get_retrieved_set( $qry_vector[$ind], $ind);
	    # compute the precision and recall parameters
	    my @prec_rec = &comp_recall( $relevance_hash{ $ind });
	    
	    # sum up precision and recall parameters for each query
	    @precision_recall_sum = 
		map { ($precision_recall_sum[$_] or 0) + $prec_rec[$_] } (0 .. 7);	
       }
       # average
       my @prec_recall_values = 
		map { $precision_recall_sum[$_] / $total_qrys } (0 .. 7);
		
       # print       
	#printf("    %-11s   %.3f  %.3f  %.4f|%.4f|%.4f|%.4f|%.4f|%.4f\n\n", 
	printf("    %-11s   %.3f  %.3f  %.3f  %.3f  %.3f  %.3f  %.3f  %.3f\n", 
	    $perms[$perm-1], 	$prec_recall_values[0], $prec_recall_values[1],
	    $prec_recall_values[2], $prec_recall_values[3], 
	    $prec_recall_values[4], $prec_recall_values[5],
	    $prec_recall_values[6], $prec_recall_values[7]); 
	
    }
    print << "Precision";

    ***********************************************************************
	   (Boolean) - Boolean term weighting
	   (Eq. Wts) - all regions are weighted equally.
	   ( 1,..4)Wts ) - Abstract region with weight 4, others 1.
    ***********************************************************************
Precision
	;
}


########################################################
## COSINE_SIM_A
## 
## Computes the cosine similarity for two vectors
## represented as associate arrays.
########################################################

sub cosine_sim_a {

    my $vec1 = shift;
    my $vec2 = shift;
    
    my $qry = shift;
    my $doc = shift;

    my $num     = 0;
    
    # check if sum of squares has been computed earlier
    # for possible reuse.
    my $sum_sq1 = $qry_sum_sq{ $qry };
    my $sum_sq2 = $doc_sum_sq{ $doc }; 
    
    my @val1 = values %{ $vec1 };
    my @val2 = values %{ $vec2 };   
	
    # calculate the sum of squares and put in the hash

    if (!$sum_sq1) {
	#foreach $term (@val1) { $sum_sq1 += $term * $term; } 
	map { $sum_sq1 += $_*$_ } @val1;
	$qry_sum_sq{ $qry } = $sum_sq1;
    }
    if(!$sum_sq2) {
	map { $sum_sq2 += $_*$_ } @val2;
	$doc_sum_sq{ $doc } = $sum_sq2;
    }    
    
    return &cosine_sim_b($vec1, $vec2, $sum_sq1, $sum_sq2);
}


########################################################
##  COSINE_SIM_B
##  
##  This function assumes that the sum of the squares
##  of the term weights have been stored in advance for
##  each document and are passed as arguments.
########################################################

sub cosine_sim_b {

    my $vec1 = shift;
    my $vec2 = shift;

    my $sum_sq1 = shift;
    my $sum_sq2 = shift;
    
    my @val1 = values %{ $vec1 };
    my @val2 = values %{ $vec2 };

    # determine shortest length vector. This should speed 
    # things up if one vector is considerable longer than
    # the other (i.e. query vector to document vector).

    if ((scalar @val1) > (scalar @val2)) {
	my $tmp  = $vec1;
	   $vec1 = $vec2;
	   $vec2 = $tmp;
    }

    my $num     = 0;
    my $key     = undef;
    my $val     = undef;

    while (($key, $val) = each %{ $vec1 }) {
	$num += $val * ($$vec2{ $key } or 0);
    }

    return ( $num / sqrt( $sum_sq1 * $sum_sq2 ));
}

########################################################
## OVERLAP_SIM
## 
## Computes the overlap similarity for two vectors
## represented as associate arrays.
########################################################

sub overlap_sim {

    my $vec1 = shift;
    my $vec2 = shift;
    
    my $qry = shift;
    my $doc = shift;

    my $num     = 0;
    
    # check if sum of weights has been computed earlier
    # for possible reuse.
    my $sum_wt1 = $qry_sum_wt{ $qry };
    my $sum_wt2 = $doc_sum_wt{ $doc }; 
    
    my @val1 = values %{ $vec1 };
    my @val2 = values %{ $vec2 };   
	
    # calculate the sum of weights and save in the hash

    if (!$sum_wt1) {
	map { $sum_wt1 += $_ } @val1;
	$qry_sum_wt{ $qry } = $sum_wt1;
    }
    if(!$sum_wt2) {
	map { $sum_wt2 += $_ } @val2;
	$doc_sum_wt{ $doc } = $sum_wt2;
    }    

    # determine shortest length vector. This should speed 
    # things up if one vector is considerable longer than
    # the other (i.e. query vector to document vector).

    if ((scalar @val1) > (scalar @val2)) {
	my $tmp  = $vec1;
	   $vec1 = $vec2;
	   $vec2 = $tmp;
    }

    my $key     = undef;
    my $val     = undef;

    while (($key, $val) = each %{ $vec1 }) {
	$num += $val * ($$vec2{ $key } or 0);
    }

    return ( $num / (( $sum_wt1 > $sum_wt2 ) ? $sum_wt2 : $sum_wt1) );
}
